// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// mod_header.cpp
SEXP mod_name_(SEXP mod);
extern "C" SEXP _ProTrackR2_mod_name_(SEXP mod) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_name_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod)));
  END_CPP11
}
// mod_header.cpp
SEXP mod_length_(SEXP mod);
extern "C" SEXP _ProTrackR2_mod_length_(SEXP mod) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_length_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod)));
  END_CPP11
}
// mod_header.cpp
SEXP mod_pattab_(SEXP mod);
extern "C" SEXP _ProTrackR2_mod_pattab_(SEXP mod) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_pattab_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod)));
  END_CPP11
}
// mod_io.cpp
SEXP open_mod_(raws data);
extern "C" SEXP _ProTrackR2_open_mod_(SEXP data) {
  BEGIN_CPP11
    return cpp11::as_sexp(open_mod_(cpp11::as_cpp<cpp11::decay_t<raws>>(data)));
  END_CPP11
}
// mod_io.cpp
SEXP mod_as_raw_(SEXP mod);
extern "C" SEXP _ProTrackR2_mod_as_raw_(SEXP mod) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_as_raw_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod)));
  END_CPP11
}
// mod_io.cpp
SEXP new_mod_(strings name);
extern "C" SEXP _ProTrackR2_new_mod_(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(new_mod_(cpp11::as_cpp<cpp11::decay_t<strings>>(name)));
  END_CPP11
}
// mod_render.cpp
SEXP render_mod_(SEXP mod, doubles render_duration, list render_options);
extern "C" SEXP _ProTrackR2_render_mod_(SEXP mod, SEXP render_duration, SEXP render_options) {
  BEGIN_CPP11
    return cpp11::as_sexp(render_mod_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<doubles>>(render_duration), cpp11::as_cpp<cpp11::decay_t<list>>(render_options)));
  END_CPP11
}
// mod_samples.cpp
SEXP mod_sample_as_raw_(SEXP mod, integers idx);
extern "C" SEXP _ProTrackR2_mod_sample_as_raw_(SEXP mod, SEXP idx) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_sample_as_raw_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(idx)));
  END_CPP11
}
// mod_samples.cpp
SEXP mod_sample_info_(SEXP mod, integers idx);
extern "C" SEXP _ProTrackR2_mod_sample_info_(SEXP mod, SEXP idx) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_sample_info_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(idx)));
  END_CPP11
}
// mod_samples.cpp
SEXP mod_sample_as_int_(SEXP mod, integers idx);
extern "C" SEXP _ProTrackR2_mod_sample_as_int_(SEXP mod, SEXP idx) {
  BEGIN_CPP11
    return cpp11::as_sexp(mod_sample_as_int_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(idx)));
  END_CPP11
}
// patterns.cpp
SEXP pattern_as_raw_(SEXP mod, integers pattern, logicals compact);
extern "C" SEXP _ProTrackR2_pattern_as_raw_(SEXP mod, SEXP pattern, SEXP compact) {
  BEGIN_CPP11
    return cpp11::as_sexp(pattern_as_raw_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(pattern), cpp11::as_cpp<cpp11::decay_t<logicals>>(compact)));
  END_CPP11
}
// pt_cell.cpp
SEXP pt_cell_(SEXP mod, integers pattern, integers channel, integers row);
extern "C" SEXP _ProTrackR2_pt_cell_(SEXP mod, SEXP pattern, SEXP channel, SEXP row) {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_cell_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(pattern), cpp11::as_cpp<cpp11::decay_t<integers>>(channel), cpp11::as_cpp<cpp11::decay_t<integers>>(row)));
  END_CPP11
}
// pt_cell.cpp
SEXP pt_cell_as_char_(SEXP mod, integers pattern, integers channel, integers row, strings padding, strings empty_char, list sformat);
extern "C" SEXP _ProTrackR2_pt_cell_as_char_(SEXP mod, SEXP pattern, SEXP channel, SEXP row, SEXP padding, SEXP empty_char, SEXP sformat) {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_cell_as_char_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(mod), cpp11::as_cpp<cpp11::decay_t<integers>>(pattern), cpp11::as_cpp<cpp11::decay_t<integers>>(channel), cpp11::as_cpp<cpp11::decay_t<integers>>(row), cpp11::as_cpp<cpp11::decay_t<strings>>(padding), cpp11::as_cpp<cpp11::decay_t<strings>>(empty_char), cpp11::as_cpp<cpp11::decay_t<list>>(sformat)));
  END_CPP11
}
// pt_cell.cpp
SEXP pt_rawcell_as_char_(raws pattern, strings padding, strings empty_char, list sformat);
extern "C" SEXP _ProTrackR2_pt_rawcell_as_char_(SEXP pattern, SEXP padding, SEXP empty_char, SEXP sformat) {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_rawcell_as_char_(cpp11::as_cpp<cpp11::decay_t<raws>>(pattern), cpp11::as_cpp<cpp11::decay_t<strings>>(padding), cpp11::as_cpp<cpp11::decay_t<strings>>(empty_char), cpp11::as_cpp<cpp11::decay_t<list>>(sformat)));
  END_CPP11
}
// pt_cell.cpp
SEXP pt_decode_compact_cell(raws source);
extern "C" SEXP _ProTrackR2_pt_decode_compact_cell(SEXP source) {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_decode_compact_cell(cpp11::as_cpp<cpp11::decay_t<raws>>(source)));
  END_CPP11
}
// pt_cell.cpp
SEXP pt_encode_compact_cell(raws source);
extern "C" SEXP _ProTrackR2_pt_encode_compact_cell(SEXP source) {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_encode_compact_cell(cpp11::as_cpp<cpp11::decay_t<raws>>(source)));
  END_CPP11
}
// pt_cleanup.cpp
SEXP pt_cleanup_();
extern "C" SEXP _ProTrackR2_pt_cleanup_() {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_cleanup_());
  END_CPP11
}
// pt_init.cpp
SEXP pt_init_();
extern "C" SEXP _ProTrackR2_pt_init_() {
  BEGIN_CPP11
    return cpp11::as_sexp(pt_init_());
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_ProTrackR2_mod_as_raw_",            (DL_FUNC) &_ProTrackR2_mod_as_raw_,            1},
    {"_ProTrackR2_mod_length_",            (DL_FUNC) &_ProTrackR2_mod_length_,            1},
    {"_ProTrackR2_mod_name_",              (DL_FUNC) &_ProTrackR2_mod_name_,              1},
    {"_ProTrackR2_mod_pattab_",            (DL_FUNC) &_ProTrackR2_mod_pattab_,            1},
    {"_ProTrackR2_mod_sample_as_int_",     (DL_FUNC) &_ProTrackR2_mod_sample_as_int_,     2},
    {"_ProTrackR2_mod_sample_as_raw_",     (DL_FUNC) &_ProTrackR2_mod_sample_as_raw_,     2},
    {"_ProTrackR2_mod_sample_info_",       (DL_FUNC) &_ProTrackR2_mod_sample_info_,       2},
    {"_ProTrackR2_new_mod_",               (DL_FUNC) &_ProTrackR2_new_mod_,               1},
    {"_ProTrackR2_open_mod_",              (DL_FUNC) &_ProTrackR2_open_mod_,              1},
    {"_ProTrackR2_pattern_as_raw_",        (DL_FUNC) &_ProTrackR2_pattern_as_raw_,        3},
    {"_ProTrackR2_pt_cell_",               (DL_FUNC) &_ProTrackR2_pt_cell_,               4},
    {"_ProTrackR2_pt_cell_as_char_",       (DL_FUNC) &_ProTrackR2_pt_cell_as_char_,       7},
    {"_ProTrackR2_pt_cleanup_",            (DL_FUNC) &_ProTrackR2_pt_cleanup_,            0},
    {"_ProTrackR2_pt_decode_compact_cell", (DL_FUNC) &_ProTrackR2_pt_decode_compact_cell, 1},
    {"_ProTrackR2_pt_encode_compact_cell", (DL_FUNC) &_ProTrackR2_pt_encode_compact_cell, 1},
    {"_ProTrackR2_pt_init_",               (DL_FUNC) &_ProTrackR2_pt_init_,               0},
    {"_ProTrackR2_pt_rawcell_as_char_",    (DL_FUNC) &_ProTrackR2_pt_rawcell_as_char_,    4},
    {"_ProTrackR2_render_mod_",            (DL_FUNC) &_ProTrackR2_render_mod_,            3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_ProTrackR2(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
